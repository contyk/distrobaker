#!/usr/bin/python3
# -*- coding: utf-8 -*-
# SPDX-License-Identifier: MIT
# Petr Å abata, Red Hat Inc., 2020
#
# DistroBaker
# Sync tool for distibution git sync and build automation.
#

import argparse
import fedora_messaging.api
import logging
import os
import sys
import threading
import time

sys.path.insert(0, os.path.join(os.path.dirname(os.path.realpath(__file__)), 'lib'))
import distrobaker

def update(config, interval):
    interval_fail = 60
    logging.info('Reloading DistroBaker configuration in {} seconds.'.format(interval))
    time.sleep(interval)
    while True:
        logging.info('Reloading DistroBaker configuration.')
        if distrobaker.load_config(config) is None:
            logging.error('Failed to reload configuration.  Attempting again in {} seconds.'.format(interval_fail))
            time.sleep(interval_fail)
        else:
            logging.info('DistroBaker configuration reloaded.  Reloading again in {} seconds.'.format(interval))
            time.sleep(interval)

def listen():
    logging.info('Listening for messages.')
    fedora_messaging.api.consume(distrobaker.process_message)
    logging.critical('Messege bus connection lost.')

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('config', help='configuration repository SCMURL')
    ap.add_argument('-l', '--loglevel', dest='loglevel', help='logging level; default: info', default='INFO')
    ap.add_argument('-u', '--update', dest='update', type=int, help='configuration refresh interval in minutes; default: 15', default=15)
    ap.add_argument('-r', '--retry', dest='retry', type=int, help='number of retries on network failures; default: 5', default=5)
    ap.add_argument('-1', '--oneshot', action='store_true', help='sync all components and exit', default=False)
    ap.add_argument('-d', '--dry-run', dest='dry_run', action='store_true', help='do not upload, push or build anything', default=False)
    args = ap.parse_args()
    loglevel = getattr(logging, args.loglevel.upper())
    if not isinstance(loglevel, int):
        print('Invalid loglevel: {}'.format(args.loglevel))
        sys.exit(1)
    logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=loglevel)
    distrobaker.retry = args.retry
    if distrobaker.load_config(args.config) is None:
        logging.critical('Could not load configuration.')
        sys.exit(1)
    logging.info('Configuration loaded.')
    config = args.config
    interval = 60 * args.update
    if args.oneshot:
        logging.info('Starting DistroBaker in the oneshot mode.')
        # XXX: Only handling rpms at the moment
        logging.warning('Modules currently not implemented and will be ignored.')
        for ns in ('rpms', ):
            logging.info('Processing components in the {} namespace.'.format(ns))
            for comp in sorted(distrobaker.get_config()['comps'][ns].keys(), key=str.lower):
                ref = distrobaker.sync_repo(comp, ns=ns, dry_run=args.dry_run)
                if ref is not None:
                    build = distrobaker.build_comp(comp, ref, ns=ns, dry_run=args.dry_run)
                    if build is not None:
                        logging.info('Build for {}/{} submitted: {}'.format(ns, comp, build))
                    else:
                        logging.error('Failed to submit a build for {}/{}.'.format(ns, comp))
                else:
                    logging.error('Failed to sync {}/{}, not attempting to build anything.'.format(ns, comp))
        logging.info('All components processed, exiting.')
    else:
        logging.info('Starting DistroBaker in the service mode.')
        distrobaker._messaging_dry_run = args.dry_run
        threading.Thread(target=update, args=(args.config, args.update * 60)).start()
        thread = threading.Thread(target=listen)
        thread.start()
        thread.join()
        logging.critical('Failed connecting to the message bus, exiting.')

if __name__ == "__main__":
    main()
