#!/usr/bin/python3
# -*- coding: utf-8 -*-
# SPDX-License-Identifier: MIT
# Petr Å abata, Red Hat Inc., 2020
#
# DistroBaker
# Sync tool for distibution git sync and build automation.
#

import argparse
import fedora_messaging.api
import logging
import os
import regex
import sys
import threading
import time

sys.path.insert(0, os.path.join(os.path.dirname(os.path.realpath(__file__)), 'lib'))
import distrobaker

def update(config, interval, logger):
    """Update the instance configuration.

    :param config: Link to the configuration in the `link#branch` format
    :param interval: Interval for configuration reloads in seconds
    :param logger: The logger to use
    :returns: None
    """
    interval_fail = 60
    logger.info('Reloading DistroBaker configuration in {} seconds.'.format(interval))
    time.sleep(interval)
    while True:
        logger.info('Reloading DistroBaker configuration.')
        if distrobaker.load_config(config) is None:
            logger.error('Failed to reload configuration.  Attempting again in {} seconds.'.format(interval_fail))
            time.sleep(interval_fail)
        else:
            logger.info('DistroBaker configuration reloaded.  Reloading again in {} seconds.'.format(interval))
            time.sleep(interval)

def listen(logger):
    """Start listening for fedora messaging bus style messages.

    :param logger: The logger to use
    :returns: None
    """
    logger.info('Listening for messages.')
    fedora_messaging.api.consume(distrobaker.process_message)
    logger.critical('Messege bus connection lost.')

def chew(compset, logger):
    """Process a set of components in one go and exit.

    :param compset: The set of components to process in the `namespace/component` format
    :param logger: The logger to use
    :returns: None
    """
    distrobaker.process_components(compset)

def main():
    logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s')
    logger = logging.getLogger(__name__)
    ap = argparse.ArgumentParser()
    ap.add_argument('config', help='configuration repository SCMURL')
    ap.add_argument('-l', '--loglevel', dest='loglevel', help='logging level; default: info', default='INFO')
    ap.add_argument('-u', '--update', dest='update', type=int, help='configuration refresh interval in minutes; default: 15', default=15)
    ap.add_argument('-r', '--retry', dest='retry', type=int, help='number of retries on network failures; default: 3', default=3)
    ap.add_argument('-1', '--oneshot', action='store_true', help='sync all components and exit', default=False)
    ap.add_argument('-d', '-n', '--dry-run', dest='dry_run', action='store_true', help='do not upload, push or build anything', default=False)
    ap.add_argument('-s', '--select', dest='select', help='space-separated list of configured components to sync in the ns/component form; defaults to all')
    args = ap.parse_args()
    loglevel = getattr(logging, args.loglevel.upper())
    if not isinstance(loglevel, int):
        print('Invalid loglevel: {}'.format(args.loglevel))
        sys.exit(1)
    logger.setLevel(loglevel)
    distrobaker.loglevel(loglevel)
    distrobaker.retries(args.retry)
    distrobaker.pretend(args.dry_run)
    if args.select and not args.oneshot:
        logger.critical('Selecting components only works with oneshot mode.')
        sys.exit(1)
    if distrobaker.load_config(args.config) is None:
        logger.critical('Could not load configuration.')
        sys.exit(128)
    logger.info('Configuration loaded.')
    if args.oneshot:
        logger.info('Starting DistroBaker in the oneshot mode.')
        logger.warning('Modules currently not implemented and will be ignored.')
        chew(set(regex.split(r'\s+', args.select)) if args.select else set(), logger)
        logger.info('All components processed, exiting.')
    else:
        logger.info('Starting DistroBaker in the service mode.')
        threading.Thread(target=update, args=(args.config, args.update * 60, logger)).start()
        thread = threading.Thread(target=listen, args=(logger, ))
        thread.start()
        thread.join()
        logger.critical('Failed connecting to the message bus, exiting.')

if __name__ == "__main__":
    main()
